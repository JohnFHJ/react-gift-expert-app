{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","prototype","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GiftExpertApp","categories","ReactDOM","render","document","querySelector"],"mappings":"kOAEaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAiBhD,OACE,sBAAMC,SAXa,SAACC,GAEpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAUP,GAAV,mBAAyBO,OACvCN,EAAc,MAKhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAjBhB,SAACP,GAEzBF,EAAcE,EAAEQ,OAAOF,aAoB3BZ,EAAYe,UAAY,CACtBd,cAAee,IAAUC,KAAKC,Y,mCC3BnBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,0FAC0EC,UAC7FH,GAFmB,sBAKFI,MAAMF,GALJ,cAKfG,EALe,gBAMEA,EAAKC,OANP,uBAMbC,EANa,EAMbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZjB,kBAedM,GAfc,4CAAH,sDCEPO,EAAc,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEvC,OADAc,QAAQC,IAAIN,EAAIC,EAAOV,GAErB,sBAAKgB,UAAU,yCAAf,UAEE,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCHGS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAc,IAAD,EACdlB,mBAAS,CACjCyB,KAAM,GACNe,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KA8BxC,OAhBAC,qBAAU,WACR1B,EAAQC,GAAU0B,MAAK,SAACC,GAAD,OACrBH,EAAS,CACPjB,KAAMoB,EACNL,SAAS,SAGZ,CAACtB,IASGuB,EDzB2BK,CAAa5B,GAAjCa,EAHyB,EAG/BN,KAAce,EAHiB,EAGjBA,QAEtB,OACE,qCACE,oBAAIJ,UAAU,oCAAd,SAAmDlB,IAClDsB,GACC,mBAAGJ,UAAU,mCAAb,wBAEF,qBAAKA,UAAU,YAAf,SACGL,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEcjBkB,EA5BO,WAAM,MAEU/C,mBAAS,CAAC,gBAFpB,mBAEnBgD,EAFmB,KAEPjD,EAFO,KAU1B,OACE,gCACE,+CAEA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACGiD,EAAWrB,KAAI,SAACT,GAGf,OAAO,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YClB/B+B,IAASC,OAAO,cAAC,EAAD,IAAmBC,SAASC,cAAc,Y","file":"static/js/main.b664887a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const handleInputChange = (e) => {\r\n    // console.log(e.target.value);\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    // Esto evita que un formulario haga refresh en la pagina\r\n    e.preventDefault();\r\n    // console.log(setCategories);\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((cat) => [inputValue, ...cat]);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.prototype = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=f8PiF8007uSHKZTgV8QOVPL5XzkXRHz7&q=${encodeURI(\r\n    category\r\n  )}&limit=10`;\r\n\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n  return gifs;\r\n};\r\n","import React from \"react\";\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n  console.log(id, title, url);\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      {/* {img.tile} */}\r\n      <img src={url} alt={title}></img>\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\n// import { getGifs } from \"../helpers/getGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  // const [images, setImages] = useState([]);\r\n  // se modifica el nombre data por images\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n      {loading && (\r\n        <p className=\"animate__animated animate__flash\">Loading...</p>\r\n      )}\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  // useEffect(() => {\r\n  //   getGifs( category )\r\n  //   .then((imgs) => setImages( imgs ));\r\n  // }, [category]); //con el array vacio en el segundo parametro, significa que este codigo se ejecute solo cuando es la primera vez\r\n  // //con algo en el array si por alguna razon la categoria cambia entonces solo es de poner el parametro en el array\r\n  // // getGifs();\r\n\r\n  //   los efectos nunca pueden ser async\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) =>\r\n      setState({\r\n        data: imgs,\r\n        loading: false,\r\n      })\r\n    );\r\n  }, [category]);\r\n\r\n  //   setTimeout(() => {\r\n  //     setState({\r\n  //       data: [1, 2, 3, 4, 5, 6, 7, 8],\r\n  //       loading: false,\r\n  //     });\r\n  //   }, 3000);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nconst GiftExpertApp = () => {\r\n  //   const categories = [\"One Punch\", \"Samurai X\", \"Dragon Ball\"];\r\n  const [categories, setCategories] = useState([\"Dragon Ball\"]);\r\n\r\n  // const handleAdd = () => {\r\n  //   //   dos formas\r\n  //   setCategories([...categories, \"Naruto\"]);\r\n  //   // setCategories((cat) => [...cat, \"Naruto\"]);\r\n  // };\r\n\r\n  return (\r\n    <div>\r\n      <h2>GiftExpertApp</h2>\r\n      {/* Se pueden enviar funciones por props para ser utilizada en otro componente */}\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr></hr>\r\n      {/* <button onClick={handleAdd}>Agregar</button> */}\r\n      <ol>\r\n        {categories.map((category) => {\r\n          //Esto se usa para que no salga el error del key, comunmente se pone\r\n          // el id del elemento que se este consultando\r\n          return <GifGrid key={category} category={category}></GifGrid>;\r\n        })}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GiftExpertApp;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport GiftExpertApp from \"./GifExpertApp\";\n\n// const divRoot = document.querySelector(\"#root\");\n\nReactDOM.render(<GiftExpertApp />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}